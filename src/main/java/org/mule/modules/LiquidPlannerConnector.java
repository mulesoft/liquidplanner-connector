/**
 * Copyright (c) MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.mule.LiquidPlanner.client.core.LiquidPlannerClient;
import org.mule.LiquidPlanner.client.core.ServiceEntity;
import org.mule.LiquidPlanner.client.model.Activity;
import org.mule.LiquidPlanner.client.model.CheckListItem;
import org.mule.LiquidPlanner.client.model.Client;
import org.mule.LiquidPlanner.client.model.Comment;
import org.mule.LiquidPlanner.client.model.Dependency;
import org.mule.LiquidPlanner.client.model.Document;
import org.mule.LiquidPlanner.client.model.Estimate;
import org.mule.LiquidPlanner.client.model.Event;
import org.mule.LiquidPlanner.client.model.Filter;
import org.mule.LiquidPlanner.client.model.Folder;
import org.mule.LiquidPlanner.client.model.LPPackage;
import org.mule.LiquidPlanner.client.model.Link;
import org.mule.LiquidPlanner.client.model.Member;
import org.mule.LiquidPlanner.client.model.Milestone;
import org.mule.LiquidPlanner.client.model.Note;
import org.mule.LiquidPlanner.client.model.Project;
import org.mule.LiquidPlanner.client.model.Task;
import org.mule.LiquidPlanner.client.model.Timesheet;
import org.mule.LiquidPlanner.client.model.TimesheetEntry;
import org.mule.LiquidPlanner.client.model.TreeItem;
import org.mule.LiquidPlanner.client.model.TreeItemType;
import org.mule.LiquidPlanner.client.model.Workspace;
import org.mule.LiquidPlanner.client.services.ActivityService;
import org.mule.LiquidPlanner.client.services.CheckListItemService;
import org.mule.LiquidPlanner.client.services.ClientService;
import org.mule.LiquidPlanner.client.services.CommentService;
import org.mule.LiquidPlanner.client.services.CustomField;
import org.mule.LiquidPlanner.client.services.CustomFieldService;
import org.mule.LiquidPlanner.client.services.DocumentService;
import org.mule.LiquidPlanner.client.services.EventService;
import org.mule.LiquidPlanner.client.services.FolderService;
import org.mule.LiquidPlanner.client.services.LinkService;
import org.mule.LiquidPlanner.client.services.MemberService;
import org.mule.LiquidPlanner.client.services.MileStoneService;
import org.mule.LiquidPlanner.client.services.PackageService;
import org.mule.LiquidPlanner.client.services.ProjectService;
import org.mule.LiquidPlanner.client.services.TaskService;
import org.mule.LiquidPlanner.client.services.TimesheetEntryService;
import org.mule.LiquidPlanner.client.services.TimesheetService;
import org.mule.LiquidPlanner.client.services.WorkspaceService;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Optional;

/**
 * LiquidPlanner is a platform-independent, online project management system
 * which features ranged estimates (e.g. 3â€“5 days) to express the uncertainty in
 * project schedules.This collaborative software is accessible via modern
 * web-browsers and mobile applications for iPhone, iPad, and Android operating
 * system-based devices.
 * 
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name = "liquidplanner", schemaVersion = "1.0", friendlyName = "LiquidPlanner")
public class LiquidPlannerConnector implements TimesheetService, TimesheetEntryService, MemberService, ProjectService,
        TaskService, ClientService, CustomFieldService, CommentService, EventService, LinkService, MileStoneService,
        PackageService, FolderService, ActivityService, DocumentService, WorkspaceService, CheckListItemService {

    private LiquidPlannerClient client;

    /**
     * Connect
     * 
     * @param username
     *            A username
     * @param password
     *            A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password) throws ConnectionException {
        this.client = new LiquidPlannerClient(username, password);
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        this.client = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return this.client != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Return a list of the time sheets
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-timesheets}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param filters
     *            the list of {@link Filter} to run through the search
     * 
     * @return Some string
     */
    @Processor
    @Override
    public List<Timesheet> getTimesheets(String workSpaceId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getTimesheets(workSpaceId, filters);
    }

    /**
     * Return a time sheets
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-timesheet}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetId
     *            the id of the timesheet
     * 
     * @return Some string
     */
    @Processor
    @Override
    public Timesheet getTimesheet(String workSpaceId, String timesheetId) {
        return client.getTimesheet(workSpaceId, timesheetId);
    }

    /**
     * Return a list of time sheets entries
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-timesheet-entries}
     * 
     * @param workSpaceId
     *            Content to be processed
     * 
     * @param filters
     *            the list of {@link Filter} to run through the search
     * @return Some string
     */
    @Processor
    @Override
    public List<TimesheetEntry> getTimesheetEntries(String workSpaceId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getTimesheetEntries(workSpaceId, filters);
    }

    /**
     * Return a time sheet entry
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-timesheet-entry}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetEntryId
     *            the id of the timesheet entry
     * @return Some string
     */
    @Processor
    @Override
    public TimesheetEntry getTimesheetEntry(String workSpaceId, String timesheetEntryId) {
        return client.getTimesheetEntry(workSpaceId, timesheetEntryId);
    }

    /**
     * Return a list of member
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-members}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @return a JSON string representing a list of members
     */
    @Processor
    @Override
    public List<Member> getMembers(String workSpaceId) {
        return client.getMembers(workSpaceId);
    }

    /**
     * Return a particular member
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-member}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param memberId
     *            the id of the member you are looking for
     * 
     * @return a JSON string representing the member
     */
    @Processor
    @Override
    public Member getMember(String workSpaceId, String memberId) {
        return client.getMember(workSpaceId, memberId);
    }

    /**
     * Return a list of projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-projects}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a JSON string representing list of projects member
     */
    @Processor
    @Override
    public List<Project> getProjects(String workSpaceId) {
        return client.getProjects(workSpaceId);
    }

    /**
     * Return a particular projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param projectId
     *            the id of the project you are looking for
     * 
     * @return a JSON string representing the member
     */
    @Processor
    @Override
    public Project getProject(String workSpaceId, String projectId) {
        return client.getProject(workSpaceId, projectId);
    }

    /**
     * Return a particular projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-project-comments}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param projectId
     *            the id of the project you are looking for
     * 
     * @return a JSON string representing the project comments
     */
    @Processor
    @Override
    public List<Comment> getProjectComments(String workSpaceId, String projectId) {
        return client.getProjectComments(workSpaceId, projectId);
    }

    /**
     * Create a new Project
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param project
     *            the project entity you're trying to create
     * 
     * @return a {@link Project}
     */
    @Processor
    @Override
    public Project createProject(String workSpaceId, Project project) {
        return client.createProject(workSpaceId, project);
    }

    /**
     * Get all the Tree items related to a workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-tree-items}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a {@link TreeItem} list
     */
    @Processor
    public String getTreeItems(String workSpaceId) {

        return client.getTreeItems(workSpaceId);
    }

    /**
     * Duplicates a particular {@link Project}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:duplicate-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param sourceProjectId
     *            the id of the source project
     * @param destinationParentId
     *            the id of the parent destination
     * @param newProjectName
     *            the name of the new project
     * @return the created {@link Project}
     */
    @Processor
    public Project duplicateProject(String workSpaceId, String sourceProjectId, String destinationParentId,
            String newProjectName) {
        Project project = client.getTreeItem(workSpaceId, sourceProjectId, Project.class);

        project.setId(null);
        project.setCreatedAt(null);
        project.setCreatedBy(null);
        project.setName(newProjectName);
        project.setParentId(destinationParentId);

        Project newProject = client.createProject(workSpaceId, project);
        duplicateChidren(workSpaceId, project.getChildren(), newProject.getId());

        return newProject;
    }

    private void duplicateChidren(String workSpaceId, List<TreeItem> chlidrens, String parentId) {
        for (TreeItem children : chlidrens) {

            if (children.getType().equals(TreeItemType.FOLDER_TYPE.type())) {
                Folder folder = (Folder) children;

                folder.setId(null);
                folder.setParentId(new Integer(parentId));
                Folder newFolder = client.createFolder(workSpaceId, folder);

                this.duplicateChidren(workSpaceId, folder.getChildren(), newFolder.getId().toString());
                continue;
            }

            if (children.getType().equals(TreeItemType.MILESTONE_TYPE.type())) {
                Milestone milestone = (Milestone) children;

                milestone.setId(null);
                milestone.setParentId(new Integer(parentId));
                client.createMilestone(workSpaceId, milestone);
                continue;
            }

            if (children.getType().equals(TreeItemType.TASK_TYPE.type())) {
                Task task = (Task) children;

                task.setId(null);
                task.setParentId(new Integer(parentId));
                client.createTask(workSpaceId, task);
                continue;
            }
        }
    }

    /**
     * Updates a particular {@link Project}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param project
     *            the project to update
     * @return the updated {@link Project}
     */
    @Processor
    @Override
    public Project updateProject(String workSpaceId, Project project) {
        return client.updateProject(workSpaceId, project);
    }

    /**
     * Deletes a particular {@link Project}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the project id to delete
     * @return the deleted {@link Project}
     */
    @Processor
    @Override
    public Project deleteProject(String workSpaceId, String id) {
        return client.deleteProject(workSpaceId, id);
    }

    /**
     * Retrieves all the existing tasks in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-tasks}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param filters
     *            the list of {@link Filter} to run through the search
     * @return the list of {@link Task}
     */
    @Processor
    @Override
    public List<Task> getTasks(String workSpaceId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getTasks(workSpaceId, filters);
    }

    /**
     * Retrieves a particular tasks in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-task}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param taskId
     *            the id of the {@link Task} to retrieve
     * @return the {@link Task}
     */
    @Processor
    @Override
    public Task getTask(String workSpaceId, String taskId) {
        return client.getTask(workSpaceId, taskId);
    }

    /**
     * Creates a task
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-task}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param task
     *            the {@link Task} to be created
     * @return the {@link Task} created
     */
    @Processor
    @Override
    public Task createTask(String workSpaceId, Task task) {
        return client.createTask(workSpaceId, task);
    }

    /**
     * Updates a task
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-task}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param task
     *            the {@link Task} to be updated
     * @return the {@link Task} updated
     */
    @Processor
    @Override
    public Task updateTask(String workSpaceId, Task task) {
        return client.updateTask(workSpaceId, task);
    }

    /**
     * Deletes a task
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-task}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param taskId
     *            the id of the {@link Task} to be deleted
     * @return the {@link Task} deleted
     */
    @Processor
    @Override
    public Task deleteTask(String workSpaceId, String taskId) {
        return client.deleteTask(workSpaceId, taskId);
    }

    /**
     * Retrieves all the {@link Timesheet} related to a {@link Task}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-task-timesheets}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param taskId
     *            the id of the {@link Task} to be deleted
     * @param filters
     *            a list of {@link Filter} to be apply to the search
     * 
     * @return a list of {@link Timesheet}
     */
    @Processor
    @Override
    public List<Timesheet> getTaskTimesheets(String workSpaceId, String taskId, @Optional List<Filter> filters) {
        return client.getTaskTimesheets(workSpaceId, taskId, filters);
    }

    /**
     * Retrieves a particular {@link Timesheet} related to a {@link Task}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-task-timesheet}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param taskId
     *            the id of the {@link Task} to be deleted
     * @param timesheetId
     *            the id of the {@link Timesheet}
     * 
     * @return the {@link Timesheet}
     */
    @Processor
    @Override
    public Timesheet getTaskTimesheet(String workSpaceId, String taskId, String timesheetId) {
        return client.getTaskTimesheet(workSpaceId, taskId, timesheetId);
    }

    /**
     * Retrieves all the {@link Client} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-clients}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * 
     * @return a list of {@link Client}
     */
    @Processor
    @Override
    public List<Client> getClients(String workSpaceId) {
        return client.getClients(workSpaceId);
    }

    /**
     * Retrieve a particular {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-client}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param clientId
     *            the id of the client
     * 
     * @return a {@link Client}
     */
    @Processor
    @Override
    public Client getClient(String workSpaceId, String clientId) {
        return client.getClient(workSpaceId, clientId);
    }

    /**
     * Retrieve all the {@link Comment} for a particular {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-client-comments}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param clientId
     *            the id of the client
     * 
     * @return a list of {@link Comment}
     */
    @Processor
    @Override
    public List<Comment> getClientComments(String workSpaceId, String clientId) {
        return client.getClientComments(workSpaceId, clientId);
    }

    /**
     * Retrieve all the {@link Document} for a particular {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-client-documents}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param clientId
     *            the id of the client
     * 
     * @return a list of {@link Document}
     */
    @Processor
    @Override
    public List<Document> getClientDocuments(String workSpaceId, String clientId) {
        return client.getClientDocuments(workSpaceId, clientId);
    }

    /**
     * Retrieve all the {@link Estimate} for a particular {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-client-estimates}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param clientId
     *            the id of the client
     * 
     * @return a list of {@link Estimate}
     */
    @Processor
    @Override
    public List<Estimate> getClientEstimates(String workSpaceId, String clientId) {
        return client.getClientEstimates(workSpaceId, clientId);
    }

    /**
     * Retrieve a particular {@link Estimate} for a particular {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-client-estimate}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param clientId
     *            the id of the client
     * @param estimateId
     *            the id of the estimate
     * 
     * @return a {@link Estimate}
     */
    @Processor
    @Override
    public Estimate getClientEstimate(String workSpaceId, String clientId, String estimateId) {
        return client.getClientEstimate(workSpaceId, clientId, estimateId);
    }

    /**
     * Retrieve all the {@link Link} for a particular {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-client-links}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param clientId
     *            the id of the client
     * 
     * @return a list of {@link Link}
     */
    @Processor
    @Override
    public List<Link> getClientLinks(String workSpaceId, String clientId) {
        return client.getClientLinks(workSpaceId, clientId);
    }

    /**
     * Retrieve a {@link Note} for a particular {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-client-note}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param clientId
     *            the id of the client
     * 
     * @return a {@link Note}
     */
    @Processor
    @Override
    public Note getClientNote(String workSpaceId, String clientId) {
        return client.getClientNote(workSpaceId, clientId);
    }

    /**
     * Creates a {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-client}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param client
     *            the the client
     * 
     * @return the {@link Client} created
     */
    @Processor
    @Override
    public Client createClient(String workSpaceId, Client client) {
        return this.client.createClient(workSpaceId, client);
    }

    /**
     * Updates a {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-client}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param client
     *            the the client
     * 
     * @return the {@link Client} updated
     */
    @Processor
    @Override
    public Client updateClient(String workSpaceId, Client client) {
        return this.client.updateClient(workSpaceId, client);
    }

    /**
     * Deletes a {@link Client}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-client}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the id of the client
     * 
     * @return the {@link Client} deleted
     */
    @Processor
    @Override
    public Client deleteClient(String workSpaceId, String id) {
        return client.deleteClient(workSpaceId, id);
    }

    /**
     * Retrieves all the {@link CustomField} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-custom-fields}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a list of {@link CustomField}
     */
    @Processor
    @Override
    public List<CustomField> getCustomFields(String workSpaceId) {
        return client.getCustomFields(workSpaceId);
    }

    /**
     * Retrieves a particular {@link CustomField}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-custom-field}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param customFieldId
     *            the id of the custom field
     * 
     * @return a {@link CustomField}
     */
    @Processor
    @Override
    public CustomField getCustomField(String workSpaceId, String customFieldId) {
        return client.getCustomField(workSpaceId, customFieldId);
    }

    /**
     * Retrieves all the {@link Comment} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-comments}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a list of {@link Comment}
     */
    @Processor
    @Override
    public List<Comment> getComments(String workSpaceId) {
        return client.getComments(workSpaceId);
    }

    /**
     * Retrieves a particular {@link Comment}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-comment}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param commentId
     *            the id of the comment
     * @return a {@link Comment}
     */
    @Processor
    @Override
    public Comment getComment(String workSpaceId, String commentId) {
        return client.getComment(workSpaceId, commentId);
    }

    /**
     * Creates a {@link Comment}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-comment}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param comment
     *            the comment to be created
     * @return the {@link Comment} created
     */
    @Processor
    @Override
    public Comment createComment(String workSpaceId, Comment comment) {
        return client.createComment(workSpaceId, comment);
    }

    /**
     * Updates a {@link Comment}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-comment}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param comment
     *            the comment to be updated
     * @return the {@link Comment} updated
     */
    @Processor
    @Override
    public Comment updateComment(String workSpaceId, Comment comment) {
        return client.updateComment(workSpaceId, comment);
    }

    /**
     * Deletes a {@link Comment}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-comment}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param commentId
     *            the id of the comment
     * @return the {@link Comment} deleted
     */
    @Processor
    @Override
    public Comment deleteComment(String workSpaceId, String commentId) {
        return client.deleteComment(workSpaceId, commentId);
    }

    /**
     * Retrieves all the {@link Event} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-events}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a list of {@link Event}
     */
    @Processor
    @Override
    public List<Event> getEvents(String workSpaceId) {
        return client.getEvents(workSpaceId);
    }

    /**
     * Retrieves a particular {@link Event}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-event}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param eventId
     *            the id of the event
     * 
     * @return a {@link Event}
     */
    @Processor
    @Override
    public Event getEvent(String workSpaceId, String eventId) {
        return client.getEvent(workSpaceId, eventId);
    }

    /**
     * Retrieves all the {@link CheckListItem} related to an event
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-event-check-list-items}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param eventId
     *            the id of the event
     * 
     * @return a list of {@link CheckListItem}
     */
    @Processor
    @Override
    public List<CheckListItem> getEventCheckListItems(String workSpaceId, String eventId) {
        return client.getCheckListItems(workSpaceId);
    }

    /**
     * Retrieves all the {@link Comment} related to an event
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-event-comments}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param eventId
     *            the id of the event
     * 
     * @return a list of {@link Comment}
     */
    @Processor
    @Override
    public List<Comment> getEventComments(String workSpaceId, String eventId) {
        return client.getEventComments(workSpaceId, eventId);
    }

    /**
     * Retrieves all the {@link Document} related to an event
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-event-documents}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param eventId
     *            the id of the event
     * 
     * @return a list of {@link Document}
     */
    @Processor
    @Override
    public List<Document> getEventDocuments(String workSpaceId, String eventId) {
        return client.getEventDocuments(workSpaceId, eventId);
    }

    /**
     * Retrieves all the {@link Link} related to an event
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-event-links}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param eventId
     *            the id of the event
     * 
     * @return a list of {@link Link}
     */
    @Processor
    @Override
    public List<Link> getEventLinks(String workSpaceId, String eventId) {
        return client.getEventLinks(workSpaceId, eventId);
    }

    /**
     * Retrieves all the {@link TimesheetEntry} related to an event
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-event-timesheet-entries}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param eventId
     *            the id of the event
     * 
     * @return a list of {@link TimesheetEntry}
     */
    @Processor
    @Override
    public List<TimesheetEntry> getEventTimesheetEntries(String workSpaceId, String eventId) {
        return client.getEventTimesheetEntries(workSpaceId, eventId);
    }

    /**
     * Creates a {@link Event}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-event}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param event
     *            the event
     * 
     * @return the {@link Event} created
     */
    @Processor
    @Override
    public Event createEvent(String workSpaceId, Event event) {
        return client.createEvent(workSpaceId, event);
    }

    /**
     * Updates a {@link Event}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-event}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param event
     *            the event
     * 
     * @return the {@link Event} updated
     */
    @Processor
    @Override
    public Event updateEvent(String workSpaceId, Event event) {
        return client.updateEvent(workSpaceId, event);
    }

    /**
     * Deletes a {@link Event}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-event}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the id of event
     * 
     * @return the {@link Event} deleted
     */
    @Processor
    @Override
    public Event deleteEvent(String workSpaceId, String id) {
        return client.deleteEvent(workSpaceId, id);
    }

    /**
     * Retrieves all the {@link Link} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-links}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a list of {@link Link}
     */
    @Processor
    @Override
    public List<Link> getLinks(String workSpaceId) {
        return client.getLinks(workSpaceId);
    }

    /**
     * Retrieves a particular {@link Link}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-link}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param linkId
     *            the id of the link
     * @return a {@link Link}
     */
    @Processor
    @Override
    public Link getLink(String workSpaceId, String linkId) {
        return client.getLink(workSpaceId, linkId);
    }

    /**
     * Creates a {@link Link}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-link}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param link
     *            the link to be created
     * @return the {@link Link} created
     */
    @Processor
    @Override
    public Link createLink(String workSpaceId, Link link) {
        return client.createLink(workSpaceId, link);
    }

    /**
     * Updates a {@link Link}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-link}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param link
     *            the link to be updated
     * @return the {@link Link} updated
     */
    @Processor
    @Override
    public Link updateLink(String workSpaceId, Link link) {
        return client.updateLink(workSpaceId, link);
    }

    /**
     * Deletes a {@link Link}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-link}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the id of the link to be deleted
     * @return the {@link Link} deleted
     */
    @Processor
    @Override
    public Link deleteLink(String workSpaceId, String id) {
        return client.deleteLink(workSpaceId, id);
    }

    /**
     * Retrieves all the {@link Milestone} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-milestones}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @return a list of {@link Milestone}
     */
    @Processor
    @Override
    public List<Milestone> getMilestones(String workSpaceId) {
        return client.getMilestones(workSpaceId);
    }

    /**
     * Retrieves a particular {@link Milestone}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-milestone}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param milestoneId
     *            the id of the milestone
     * @return the {@link Milestone}
     */
    @Processor
    @Override
    public Milestone getMilestone(String workSpaceId, String milestoneId) {
        return client.getMilestone(workSpaceId, milestoneId);
    }

    /**
     * Creates particular {@link Milestone}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-milestone}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param milestone
     *            the {@link Milestone}
     * @return the {@link Milestone} created
     */
    @Processor
    @Override
    public Milestone createMilestone(String workSpaceId, Milestone milestone) {
        return client.createMilestone(workSpaceId, milestone);
    }

    /**
     * Updates a particular {@link Milestone}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-milestone}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param milestone
     *            the {@link Milestone}
     * @return the {@link Milestone} updated
     */
    @Processor
    @Override
    public Milestone updateMilestone(String workSpaceId, Milestone milestone) {
        return client.updateMilestone(workSpaceId, milestone);
    }

    /**
     * Deletes a particular {@link Milestone}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-milestone}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the id of the {@link Milestone}
     * @return the {@link Milestone} deleted
     */
    @Processor
    @Override
    public Milestone deleteMilestone(String workSpaceId, String id) {
        return client.deleteMilestone(workSpaceId, id);
    }

    /**
     * Retrieves all the {@link LPPackage} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-packages}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param filters
     *            a list of {@link Filter} to be applied to the search
     * @return a list of {@link LPPackage}
     */
    @Processor
    @Override
    public List<LPPackage> getPackages(String workSpaceId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getPackages(workSpaceId, filters);
    }

    /**
     * Retrieves a particular {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-package}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param packageId
     *            the id of the package
     * @return the {@link LPPackage}
     */
    @Processor
    @Override
    public LPPackage getPackage(String workSpaceId, String packageId) {
        return client.getPackage(workSpaceId, packageId);
    }

    /**
     * Retrieves all the {@link Comment} for a particular {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-package-comments}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param packageId
     *            the id of the package
     * @return a list of {@link Comment}
     */
    @Processor
    @Override
    public List<Comment> getPackageComments(String workSpaceId, String packageId) {
        return client.getPackageComments(workSpaceId, packageId);
    }

    /**
     * Retrieves all the {@link Dependency} for a particular {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-package-dependencies}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param packageId
     *            the id of the package
     * @return a list of {@link Dependency}
     */
    @Processor
    @Override
    public List<Dependency> getPackageDependencies(String workSpaceId, String packageId) {
        return client.getPackageDependencies(workSpaceId, packageId);
    }

    /**
     * Retrieves all the {@link Document} for a particular {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-package-documents}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param packageId
     *            the id of the package
     * @return a list of {@link Document}
     */
    @Processor
    @Override
    public List<Document> getPackageDocuments(String workSpaceId, String packageId) {
        return client.getPackageDocuments(workSpaceId, packageId);
    }

    /**
     * Retrieves all the {@link Estimate} for a particular {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-package-estimates}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param packageId
     *            the id of the package
     * @return a list of {@link Estimate}
     */
    @Processor
    @Override
    public List<Estimate> getPackageEstimates(String workSpaceId, String packageId) {
        return client.getPackageEstimates(workSpaceId, packageId);
    }

    /**
     * Retrieves all the {@link Link} for a particular {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-package-links}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param packageId
     *            the id of the package
     * @return a list of {@link Link}
     */
    @Processor
    @Override
    public List<Link> getPackageLinks(String workSpaceId, String packageId) {
        return client.getPackageLinks(workSpaceId, packageId);
    }

    /**
     * Retrieves all the {@link Note} for a particular {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-package-note}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param packageId
     *            the id of the package
     * @return a list of {@link Note}
     */
    @Processor
    @Override
    public List<Note> getPackageNote(String workSpaceId, String packageId) {
        return client.getPackageNote(workSpaceId, packageId);
    }

    /**
     * Creates a {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-package}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param aPackage
     *            the {@link LPPackage} to be created
     * @return the {@link LPPackage} created
     */
    @Processor
    @Override
    public LPPackage createPackage(String workSpaceId, LPPackage aPackage) {
        return client.createPackage(workSpaceId, aPackage);
    }

    /**
     * Updates a {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-package}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param lpPackage
     *            the {@link LPPackage} to be updated
     * @return the {@link LPPackage} updated
     */
    @Processor
    @Override
    public LPPackage updatePackage(String workSpaceId, LPPackage lpPackage) {
        return client.updatePackage(workSpaceId, lpPackage);
    }

    /**
     * Deletes a {@link LPPackage}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-package}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the id of the {@link LPPackage} to be updated
     * @return the {@link LPPackage} deleted
     */
    @Processor
    @Override
    public LPPackage deletePackage(String workSpaceId, String id) {
        return client.deletePackage(workSpaceId, id);
    }

    /**
     * Retrieves all the {@link Folder} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-folders}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @return a list of {@link Folder}
     */
    @Processor
    @Override
    public List<Folder> getFolders(String workSpaceId) {
        return client.getFolders(workSpaceId);
    }

    /**
     * Retrieves a particular {@link Folder}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-folder}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param folderId
     *            the id of the folder
     * @return a {@link Folder}
     */
    @Processor
    @Override
    public Folder getFolder(String workSpaceId, String folderId) {
        return client.getFolder(workSpaceId, folderId);
    }

    /**
     * Creates a {@link Folder}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-folder}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param folder
     *            the {@link Folder} to be created
     * @return the {@link Folder} created
     */
    @Processor
    @Override
    public Folder createFolder(String workSpaceId, Folder folder) {
        return client.createFolder(workSpaceId, folder);
    }

    /**
     * Updates a {@link Folder}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-folder}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param folder
     *            the {@link Folder} to be updated
     * @return the {@link Folder} updated
     */
    @Processor
    @Override
    public Folder updateFolder(String workSpaceId, Folder folder) {
        return client.updateFolder(workSpaceId, folder);
    }

    /**
     * Deletes a {@link Folder}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-folder}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the id of the {@link Folder} to be deleted
     * @return the {@link Folder} deleted
     */
    @Processor
    @Override
    public Folder deleteFolder(String workSpaceId, String id) {
        return client.deleteFolder(workSpaceId, id);
    }

    /**
     * Retrieves all the {@link Activity} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-activities}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @return a list of {@link Activity}
     */
    @Processor
    @Override
    public List<Activity> getActivities(String workSpaceId) {
        return client.getActivities(workSpaceId);
    }

    /**
     * Retrieves a particular {@link Activity}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-activity}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param activityId
     *            the id of the activity
     * @return the {@link Activity}
     */
    @Processor
    @Override
    public Activity getActivity(String workSpaceId, String activityId) {
        return client.getActivity(workSpaceId, activityId);
    }

    /**
     * Retrieves all the {@link Document} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-documents}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @return a list of {@link Document}
     */
    @Processor
    @Override
    public List<Document> getDocuments(String workSpaceId) {
        return client.getDocuments(workSpaceId);
    }

    /**
     * Retrieves a particular {@link Document}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-document}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param documentId
     *            the id of the document
     * @return a {@link Document}
     */
    @Processor
    @Override
    public Document getDocument(String workSpaceId, String documentId) {
        return client.getDocument(workSpaceId, documentId);
    }

    /**
     * Retrieves all the {@link Document} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:download-document}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param documentId
     *            the id of the document
     * @return the input stream for the actual document represented by a
     *         {@link Document}
     */
    @Processor
    @Override
    public InputStream downloadDocument(String workSpaceId, String documentId) {
        return client.downloadDocument(workSpaceId, documentId);
    }

    /**
     * Creates a {@link Document}
     * 
     * <b>NOTE:</b> due to unresolved issues in the LiquidPlanner API this
     * message processor is not returning a Java Object. Instead the processor
     * is returning a String which is the JSON representation of the object that
     * the LiquidPlanner API is actually returning.
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-document}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param entity
     *            the type to which the document should be created against
     * @param entityId
     *            the id of the entity
     * @param fileName
     *            the name of the file to assign to the document
     * @param fileDescription
     *            a description for the document @ fileInputStream the
     * @param fileInputStream
     *            for the document to be uploaded
     * @return a string representation of the document
     */
    @Processor
    @Override
    public String createDocument(String workSpaceId, ServiceEntity entity, String entityId, String fileName,
            String fileDescription, InputStream fileInputStream) {
        return client.createDocument(workSpaceId, entity, entityId, fileName, fileDescription, fileInputStream);
    }

    /**
     * Deletes a {@link Document}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:delete-document}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param id
     *            the id of the document to be deleted
     * @return the {@link Document} deleted
     */
    @Processor
    @Override
    public Document deleteDocument(String workSpaceId, String id) {
        return client.deleteDocument(workSpaceId, id);
    }

    /**
     * Retrieves all the {@link Workspace} releted to the account
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-work-spaces}
     * 
     * @return the {@link Workspace} deleted
     */
    @Processor
    @Override
    public List<Workspace> getWorkSpaces() {
        return client.getWorkSpaces();
    }

    /**
     * Retrieves a particular {@link Workspace}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-workspace}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @return the {@link Workspace}
     */
    @Processor
    @Override
    public Workspace getWorkspace(String workSpaceId) {
        return client.getWorkspace(workSpaceId);
    }

    /**
     * Retrieves all the {@link CheckListItem} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-check-list-items}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @return a list of {@link CheckListItem}
     */
    @Processor
    @Override
    public List<CheckListItem> getCheckListItems(String workSpaceId) {
        return client.getCheckListItems(workSpaceId);
    }

    /**
     * Retrieves all the {@link CheckListItem} in the workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-check-list-item}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param checkListItemId
     *            the id of the checklistitem
     * @return a list of {@link CheckListItem}
     */
    @Processor
    @Override
    public CheckListItem getCheckListItem(String workSpaceId, String checkListItemId) {
        return client.getCheckListItem(workSpaceId, checkListItemId);
    }

    /**
     * Updates a {@link Document}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:update-document}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param document
     *            the {@link Document} to be updated
     * @return the {@link Document} updated
     */
    @Processor
    @Override
    public Document updateDocument(String workSpaceId, Document document) {
        return client.updateDocument(workSpaceId, document);
    }

}
