/**
 * Copyright (c) MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import java.util.ArrayList;
import java.util.List;

import org.mule.LiquidPlanner.client.core.LiquidPlannerClient;
import org.mule.LiquidPlanner.client.model.Comment;
import org.mule.LiquidPlanner.client.model.Filter;
import org.mule.LiquidPlanner.client.model.Project;
import org.mule.LiquidPlanner.client.services.MemberService;
import org.mule.LiquidPlanner.client.services.ProjectService;
import org.mule.LiquidPlanner.client.services.TimeSheetService;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Optional;

/**
 * Cloud Connector
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name = "liquidplanner", schemaVersion = "1.0-SNAPSHOT")
public class LiquidPlannerConnector implements TimeSheetService, MemberService, ProjectService {

    private LiquidPlannerClient client;

    /**
     * Connect
     * 
     * @param username
     *            A username
     * @param password
     *            A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password) throws ConnectionException {
        this.client = new LiquidPlannerClient(username, password);
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        this.client = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return this.client != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Return a list of the time sheets
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheets}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param filters
     *            the list of {@link Filter} to run through the search
     * 
     * @return Some string
     */
    @Processor
    @Override
    public String getTimeSheets(String workSpaceId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getTimeSheets(workSpaceId, filters);
    }

    /**
     * Return a time sheets
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheet}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetId
     *            the id of the timesheet
     * 
     * @return Some string
     */
    @Processor
    @Override
    public String getTimeSheet(String workSpaceId, String timesheetId) {
        return client.getTimeSheet(workSpaceId, timesheetId);
    }

    /**
     * Return a list of time sheets entries
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheet-entries}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetId
     *            the id of the timesheet
     * @param filters
     *            the list of {@link Filter} to run through the search
     * @return Some string
     */
    @Processor
    @Override
    public String getTimeSheetEntries(String workSpaceId, String timesheetId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getTimeSheetEntries(workSpaceId, timesheetId, filters);
    }

    /**
     * Return a time sheet entry
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheet-entry}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetId
     *            the id of the timesheet
     * @param timesheetEntryId
     *            the id of the timesheet entry
     * @return Some string
     */
    @Processor
    @Override
    public String getTimeSheetEntry(String workSpaceId, String timesheetId, String timesheetEntryId) {
        return client.getTimeSheetEntry(workSpaceId, timesheetId, timesheetEntryId);
    }

    /**
     * Return a list of member
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-members}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @return a JSON string representing a list of members
     */
    @Processor
    @Override
    public String getMembers(String workSpaceId) {
        return client.getMembers(workSpaceId);
    }

    /**
     * Return a particular member
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-member}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param memberId
     *            the id of the member you are looking for
     * 
     * @return a JSON string representing the member
     */
    @Processor
    @Override
    public String getMember(String workSpaceId, String memberId) {
        return client.getMember(workSpaceId, memberId);
    }

    /**
     * Return a list of projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-projects}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a JSON string representing list of projects member
     */
    @Processor
    @Override
    public List<Project> getProjects(String workSpaceId) {
        return client.getProjects(workSpaceId);
    }

    /**
     * Return a particular projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param projectId
     *            the id of the project you are looking for
     * 
     * @return a JSON string representing the member
     */
    @Processor
    @Override
    public Project getProject(String workSpaceId, String projectId) {
        return client.getProject(workSpaceId, projectId);
    }

    /**
     * Return a particular projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-project-comments}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param projectId
     *            the id of the project you are looking for
     * 
     * @return a JSON string representing the project comments
     */
    @Processor
    @Override
    public List<Comment> getProjectComments(String workSpaceId, String projectId) {
        return client.getProjectComments(workSpaceId, projectId);
    }

    /**
     * Create a new Project
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param project
     *            the project entity you're trying to create
     * 
     * @return a JSON string representing the project
     */
    @Processor
    @Override
    public String createProject(String workSpaceId, Project project) {
        return client.createProject(workSpaceId, project);
    }

    // /**
    // * Configurable
    // */
    // @Configurable
    // private String myProperty;
    //
    // /**
    // * Set property
    // *
    // * @param myProperty My property
    // */
    // public void setMyProperty(String myProperty)
    // {
    // this.myProperty = myProperty;
    // }
    //
    // /**
    // * Get property
    // */
    // public String getMyProperty()
    // {
    // return this.myProperty;
    // }
    //
    //
    // /**
    // * Custom processor
    // *
    // * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
    // liquidplanner:my-processor}
    // *
    // * @param content Content to be processed
    // * @return Some string
    // */
    // @Processor
    // public String myProcessor(String content)
    // {
    // /*
    // * MESSAGE PROCESSOR CODE GOES HERE
    // */
    //
    // return content;
    // }

}
