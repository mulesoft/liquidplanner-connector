/**
 * Copyright (c) MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import java.util.ArrayList;
import java.util.List;

import org.mule.LiquidPlanner.client.core.LiquidPlannerClient;
import org.mule.LiquidPlanner.client.model.Comment;
import org.mule.LiquidPlanner.client.model.Filter;
import org.mule.LiquidPlanner.client.model.Folder;
import org.mule.LiquidPlanner.client.model.Milestone;
import org.mule.LiquidPlanner.client.model.Project;
import org.mule.LiquidPlanner.client.model.Task;
import org.mule.LiquidPlanner.client.model.TreeItem;
import org.mule.LiquidPlanner.client.model.TreeItemType;
import org.mule.LiquidPlanner.client.services.FolderService;
import org.mule.LiquidPlanner.client.services.MemberService;
import org.mule.LiquidPlanner.client.services.MileStoneService;
import org.mule.LiquidPlanner.client.services.ProjectService;
import org.mule.LiquidPlanner.client.services.TimesheetService;
import org.mule.LiquidPlanner.client.services.TreeItemService;
import org.mule.LiquidPlanner.client.services.impl.FolderServiceClient;
import org.mule.LiquidPlanner.client.services.impl.MilestoneServiceClient;
import org.mule.LiquidPlanner.client.services.impl.TaskServiceClient;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Optional;

/**
 * Cloud Connector
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name = "liquidplanner", schemaVersion = "1.0-SNAPSHOT")
public class LiquidPlannerConnector implements TimesheetService, MemberService, ProjectService {

    private LiquidPlannerClient client;

    /**
     * Connect
     * 
     * @param username
     *            A username
     * @param password
     *            A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password) throws ConnectionException {
        this.client = new LiquidPlannerClient(username, password);
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        this.client = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return this.client != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Return a list of the time sheets
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheets}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param filters
     *            the list of {@link Filter} to run through the search
     * 
     * @return Some string
     */
    @Processor
    @Override
    public String getTimesheets(String workSpaceId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getTimesheets(workSpaceId, filters);
    }

    /**
     * Return a time sheets
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheet}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetId
     *            the id of the timesheet
     * 
     * @return Some string
     */
    @Processor
    @Override
    public String getTimesheet(String workSpaceId, String timesheetId) {
        return client.getTimesheet(workSpaceId, timesheetId);
    }

    /**
     * Return a list of time sheets entries
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheet-entries}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetId
     *            the id of the timesheet
     * @param filters
     *            the list of {@link Filter} to run through the search
     * @return Some string
     */
    @Processor
    @Override
    public String getTimeSheetEntries(String workSpaceId, String timesheetId, @Optional List<Filter> filters) {
        filters = filters == null ? new ArrayList<Filter>() : filters;
        return client.getTimeSheetEntries(workSpaceId, timesheetId, filters);
    }

    /**
     * Return a time sheet entry
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-time-sheet-entry}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @param timesheetId
     *            the id of the timesheet
     * @param timesheetEntryId
     *            the id of the timesheet entry
     * @return Some string
     */
    @Processor
    @Override
    public String getTimeSheetEntry(String workSpaceId, String timesheetId, String timesheetEntryId) {
        return client.getTimeSheetEntry(workSpaceId, timesheetId, timesheetEntryId);
    }

    /**
     * Return a list of member
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-members}
     * 
     * @param workSpaceId
     *            Content to be processed
     * @return a JSON string representing a list of members
     */
    @Processor
    @Override
    public String getMembers(String workSpaceId) {
        return client.getMembers(workSpaceId);
    }

    /**
     * Return a particular member
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-member}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param memberId
     *            the id of the member you are looking for
     * 
     * @return a JSON string representing the member
     */
    @Processor
    @Override
    public String getMember(String workSpaceId, String memberId) {
        return client.getMember(workSpaceId, memberId);
    }

    /**
     * Return a list of projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-projects}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a JSON string representing list of projects member
     */
    @Processor
    @Override
    public List<Project> getProjects(String workSpaceId) {
        return client.getProjects(workSpaceId);
    }

    /**
     * Return a particular projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param projectId
     *            the id of the project you are looking for
     * 
     * @return a JSON string representing the member
     */
    @Processor
    @Override
    public Project getProject(String workSpaceId, String projectId) {
        return client.getProject(workSpaceId, projectId);
    }

    /**
     * Return a particular projects
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-project-comments}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param projectId
     *            the id of the project you are looking for
     * 
     * @return a JSON string representing the project comments
     */
    @Processor
    @Override
    public List<Comment> getProjectComments(String workSpaceId, String projectId) {
        return client.getProjectComments(workSpaceId, projectId);
    }

    /**
     * Create a new Project
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:create-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param project
     *            the project entity you're trying to create
     * 
     * @return a {@link Project}
     */
    @Processor
    @Override
    public Project createProject(String workSpaceId, Project project) {
        return client.createProject(workSpaceId, project);
    }

    /**
     * Get all the Tree items related to a workspace
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:get-tree-items}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * 
     * @return a {@link TreeItem} list
     */
    @Processor
    public String getTreeItems(String workSpaceId) {

        return client.getTreeItems(workSpaceId);
    }

    // <!-- BEGIN_INCLUDE(liquidplanner:get-tree-item) -->
    // <liquidplanner:get-tree-item workSpaceId="#[map-payload:workspaceid]"
    // treeItemId="#[map-payload:treeitemid]" clazz="#[map-payload:clazz]"/>
    // <!-- END_INCLUDE(liquidplanner:get-tree-item) -->
    // /**
    // * Get a particular Tree items related to a workspace
    // *
    // * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
    // * liquidplanner:get-tree-item}
    // *
    // * @param workSpaceId
    // * the id of the workspace
    // * @param treeItemId
    // * the id of the tree item
    // * @param clazz
    // * the class of the treeitem to be returned
    // *
    // * @return a {@link TreeItem}
    // */
    // @Processor
    // @Override
    // public <T extends TreeItem> T getTreeItem(String workSpaceId, String
    // treeItemId, Class<T> clazz) {
    // return client.getTreeItem(workSpaceId, treeItemId, clazz);
    // }

    /**
     * Duplicates a particular {@link Project}
     * 
     * {@sample.xml ../../../doc/LiquidPlanner-connector.xml.sample
     * liquidplanner:duplicate-project}
     * 
     * @param workSpaceId
     *            the id of the workspace
     * @param sourceProjectId
     *            the id of the source project
     * @param destinationParentId
     *            the id of the parent destination
     * @param newProjectName
     *            the name of the new project
     * @return the created {@link Project}
     */
    @Processor
    public Project duplicateProject(String workSpaceId, String sourceProjectId, String destinationParentId,
            String newProjectName) {
        Project project = client.getTreeItem(workSpaceId, sourceProjectId, Project.class);

        project.setId(null);
        project.setCreatedAt(null);
        project.setCreatedBy(null);
        project.setName(newProjectName);
        project.setParentId(destinationParentId);

        Project newProject = client.createProject(workSpaceId, project);
        duplicateChidren(workSpaceId, project.getChildren(), newProject.getId());

        return newProject;
    }

    private void duplicateChidren(String workSpaceId, List<TreeItem> chlidrens, String parentId) {
        for (TreeItem children : chlidrens) {

            if (children.getType().equals(TreeItemType.FOLDER_TYPE.type())) {
                Folder folder = (Folder) children;

                folder.setId(null);
                folder.setParentId(new Integer(parentId));
                Folder newFolder = client.createFolder(workSpaceId, folder);

                this.duplicateChidren(workSpaceId, folder.getChildren(), newFolder.getId().toString());
                continue;
            }

            if (children.getType().equals(TreeItemType.MILESTONE_TYPE.type())) {
                Milestone milestone = (Milestone) children;

                milestone.setId(null);
                milestone.setParentId(new Integer(parentId));
                client.createMilestone(workSpaceId, milestone);
                continue;
            }

            if (children.getType().equals(TreeItemType.TASK_TYPE.type())) {
                Task task = (Task) children;

                task.setId(null);
                task.setParentId(new Integer(parentId));
                client.createTask(workSpaceId, task);
                continue;
            }
        }
    }

    // /**
    // * Configurable
    // */
    // @Configurable
    // private String myProperty;
    //
    // /**
    // * Set property
    // *
    // * @param myProperty My property
    // */
    // public void setMyProperty(String myProperty)
    // {
    // this.myProperty = myProperty;
    // }
    //
    // /**
    // * Get property
    // */
    // public String getMyProperty()
    // {
    // return this.myProperty;
    // }
}
